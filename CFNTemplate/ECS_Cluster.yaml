AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to create resources required to run tasks on an
  ECS cluster.
Mappings:
  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24
Parameters:
  EcsAmiId:
    Type: String
    Description: ECS EC2 AMI id
    Default: ''
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SpotPrice:
    Type: Number
    Description: 'If greater than 0, then a EC2 Spot instance will be requested'
    Default: '0'
  KeyName:
    Type: String
    Description: >-
      Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS
      instances
    Default: ''
  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ''
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17}|)$'
    ConstraintDescription: >-
      VPC Id must begin with 'vpc-' followed by either an 8 or 17 character
      identifier, or leave blank to have a new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma separated list of two (2) existing VPC Subnet Ids where
      ECS instances will run.  Required if setting VpcId.
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '1'
  SecurityGroupIds:
    Type: CommaDelimitedList
    Description: >-
      Optional - Existing security group to associate the container instances.
      Creates one by default.
    Default: ''
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsPort:
    Type: String
    Description: >-
      Optional - Security Group port to open on ECS instances - defaults to port
      80
    Default: '80'
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma-delimited list of VPC availability zones in which to
      create subnets.  Required if setting VpcId.
    Default: ''
  AssociatePublicIpAddress:
    Type: String
    Description: >-
      Optional - Automatically assign public IP addresses to new instances in
      this VPC.
    Default: 'true'
  EcsCluster:
    Type: String
    Description: ECS Cluster Name
    Default: ''
  InstanceRole:
    Type: String
    Description: Optional - Instance IAM Role.
    Default: ''
  IsFargate:
    Type: String
    Description: Optional - Whether to create resources only for running Fargate tasks.
    Default: 'false'
  UserData:
    Type: String
    Description: >-
      User data for EC2 instances. Required for EC2 launch type, ignored with
      Fargate
    Default: ''
Conditions:
  CreateECSCluster: !Equals 
    - !Ref EcsCluster
    - ''
  IsCNRegion: !Or 
    - !Equals 
      - !Ref 'AWS::Region'
      - cn-north-1
    - !Equals 
      - !Ref 'AWS::Region'
      - cn-northwest-1
  LaunchInstances: !Equals 
    - !Ref IsFargate
    - 'false'
  CreateVpcResources: !Equals 
    - !Ref VpcId
    - ''
  CreateSecurityGroup: !And 
    - !Condition LaunchInstances
    - !Equals 
      - !Join 
        - ''
        - !Ref SecurityGroupIds
      - ''
  CreateEC2LCWithKeyPair: !And 
    - !Condition LaunchInstances
    - !Not 
      - !Equals 
        - !Ref KeyName
        - ''
  UseSpecifiedVpcAvailabilityZones: !Not 
    - !Equals 
      - !Join 
        - ''
        - !Ref VpcAvailabilityZones
      - ''
  CreateEcsInstanceRole: !And 
    - !Condition LaunchInstances
    - !Equals 
      - !Ref InstanceRole
      - ''
  UseSpotInstances: !Not 
    - !Equals 
      - !Ref SpotPrice
      - 0
Resources:
  MyEcsCluster:
    Condition: CreateECSCluster
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  Vpc:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap 
        - VpcCidrs
        - vpc
        - cidr
      Tags: []
  PubSubnetAz1:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap 
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags: []
      AvailabilityZone: !If 
        - UseSpecifiedVpcAvailabilityZones
        - !Select 
          - '0'
          - !Ref VpcAvailabilityZones
        - !Select 
          - '0'
          - !GetAZs 
            Ref: 'AWS::Region'
  PubSubnetAz2:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap 
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags: []
      AvailabilityZone: !If 
        - UseSpecifiedVpcAvailabilityZones
        - !Select 
          - '1'
          - !Ref VpcAvailabilityZones
        - !Select 
          - '1'
          - !GetAZs 
            Ref: 'AWS::Region'
  InternetGateway:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: []
  AttachGateway:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags: []
  PublicRouteViaIgw:
    Condition: CreateVpcResources
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  EcsSecurityGroup:
    Condition: CreateSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Allowed Ports
      Tags: []
      VpcId: !If 
        - CreateVpcResources
        - !Ref Vpc
        - !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !FindInMap 
            - VpcCidrs
            - vpc
            - cidr
  EcsInstanceRole:
    Condition: CreateEcsInstanceRole
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !If 
                  - IsCNRegion
                  - ec2.amazonaws.com.cn
                  - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EcsInstanceProfile:
    Condition: LaunchInstances
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !If 
          - CreateEcsInstanceRole
          - !Ref EcsInstanceRole
          - !Ref InstanceRole
  EcsInstanceLc:
    Condition: LaunchInstances
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: !Ref EcsInstanceType
      SpotPrice: !If 
        - UseSpotInstances
        - !Ref SpotPrice
        - !Ref 'AWS::NoValue'
      AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
      IamInstanceProfile: !Ref EcsInstanceProfile
      KeyName: !If 
        - CreateEC2LCWithKeyPair
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      SecurityGroups: !If 
        - CreateSecurityGroup
        - - !Ref EcsSecurityGroup
        - !Ref SecurityGroupIds
      UserData: !Base64 
        'Fn::Sub':
          - |
            #!/bin/bash
            echo "ECS_CLUSTER=${ClusterName}">> /etc/ecs/ecs.config
          - ClusterName: !If 
              - CreateECSCluster
              - !Ref MyEcsCluster
              - !Ref EcsCluster
  EcsInstanceAsg:
    Condition: LaunchInstances
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !If 
        - CreateVpcResources
        - - !Join 
            - ','
            - - !Ref PubSubnetAz1
              - !Ref PubSubnetAz2
        - !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '0'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: ECS Instance - amazon-ecs-cli-setup-MyWorkingCluster
          PropagateAtLaunch: true
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ecs-cluster-alb
      VpcId: !Ref Vpc
  ALBSecurityGroupInHttpWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  DefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      Type: application
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DefaultTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

